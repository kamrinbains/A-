A* Algorithm Implementation

This is an implementation of the A* pathfinding algorithm in C++. The algorithm finds the shortest path between two nodes in a graph using heuristic functions.

Compilation

Compile the code using:

g++ -std=c++17 -o a.out astar.cpp

Running Tests

You can run the program with test input files as follows:

chmod +x run_tests.sh
./run_tests.sh

Test Cases

Seven test cases are provided to verify the correctness of the implementation:

1. A basic linear graph to test fundamental functionality
Visualization:
	0 --- 1 --- 2 --- 3 --- 4
	Start                Goal

2. A graph with multiple possible paths to test optimal path selection
Visualization:
	    3 --- 4
	   /       \
	  0 --- 1 -- 2
	        \   /
	         \ /
	          5

3. A disconnected graph to test handling of impossible paths
Visualization:
	0 --- 1    2    3 --- 4
	Start                Goal

4. A grid-like graph to test navigation in 2D space with Manhattan distance
Visualization:
	6 --- 7 --- 8
	|     |     |
	3 --- 4 --- 5
	|     |     |
	0 --- 1 --- 2

5. A graph with varying edge weights to test optimal path selection
Visualization:
	    /----- 10 ------\
	   /                 \
	  0 ----- 5 -----> 2 -- 3 -- 4
	   \                      /
	    \----- 20 ----------/

6. Tests the directed nature of the graph (will fail if graph is undirected)
Visualization:
	0 --- 1    2 --- 3
	Start            Goal

7. Tests when start and goal nodes are the same
Visualization:
	0 --- 1 --- 2 --- 3 --- 4
	        Start/Goal


Important Notes

- The implementation assumes 0-indexed nodes
- By default, the graph is directed. For undirected graphs, uncomment the line:
  // graph[v].push_back({u, cost});

Input format:
   numNodes
   node1_id node1_x node1_y
   node2_id node2_x node2_y
   ...
   numEdges
   from1_id to1_id weight1
   from2_id to2_id weight2
   ...
   startNodeId
   goalNodeId
   heuristicChoice (1 = Euclidean, 2 = Manhattan)


